import os
import numpy
import re
from numpy import genfromtxt
from PIL import Image
from os import listdir
from os.path import isfile, isdir, join, exists
from Utilidades.Configuracion.Config import Config

class DataSet:
	
	def __init__(self,config):
		self.Config = config
		self.list_imagenes = []
		self.list_etiquetas = []
		self.DT_Etiquetas = []
		self.DT_Imagenes = []
		self.DT_Predicciones = []

	def LeerArchivos(self):
		for eti in listdir(self.config.RT_ENTRENAMIENTO):
			d=join(ruta,eti)

			if isdir(d):
				numImagenes = 0
				for f1 in listdir(d):
					imagen = join(d, f1)
					if isfile(imagen):
						if self.filtro(imagen):
							numImagenes = numImagenes + 1
							self.lista_imagenes.append(imagen)
				if numImagenes > 0:
					self.list_etiquetas.append([eti, numImagenes])
	
	def filtro(self, nombre_archivo):
		result = re.match("([A-Za-z0-9]+.([Pp][Nn][Gg]|[Bb][Mm][Pp]|[Jj][Pp][Gg]))", nombre_archivo)
		if result == "None":
			return False
		else:
			return True

	def Cargar_Imagenes(self):
		for archivo in self.list_imagenes:
			imageFile = Image.open(archivo).convert(mode='L', dither=3)
			imageSize = imageFile.size
			rawData = imageFile.tobytes('raw')
			img = Image.frombytes('L', imageSize, rawData)
			patron = numpy.asarray(img, dtype="float") #.__xor__(1)
			
			
			for i in range(len(patron)):
				for j in range(len(patron[0])):
					if patron[i][j] == 255:
						patron[i][j] = 0.0
					elif patron[i][j] == 0:
						patron[i][j] = 1.0
					else:
						patron[i][j] = round((patron[i][j])/255, 1)

			vectorA=numpy.concatenate(patron)
			self.DT_Imagenes.append(vectorA)

	def Cargar_Etiquetas(self):
		vectorzero=[]
		rango = len(self.list_etiquetas)
		self.llenarVectorCero(vectorzero,rango)
		
		for i in range(rango):
			self.DT_Predicciones.append(self.list_etiquetas[i][0])
			for j in range(self.list_etiquetas[i][1]):
				self.llenarVectorCero(vectorzero,rango)
				vectorzero.insert(i,1)
				self.DT_Etiquetas.append(numpy.array(vectorzero))
		numpy.savetxt(self.Config.RT_ENTRENAMIENTO + 'Prediccion.csv', self.DT_Etiquetas, delimiter=",",fmt='%s')

	def Cargar_Predicciones(self):
		if exists(self.Config.RT_ENTRENAMIENTO + 'Prediccion.csv')
			self.DT_Predicciones=genfromtxt(self.Config.RT_ENTRENAMIENTO + 'Prediccion.csv', delimiter=',')
			return True
		else:
			return False
				

	def llenarVectorCero(self,vector,rango):
		del vector[:]
		for i in range(rango):
		    vector.append(0)
		return vector
		
		
